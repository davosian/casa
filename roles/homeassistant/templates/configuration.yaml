homeassistant:
{% for key, value in homeassistant_general_config.iteritems() %}
  {{key}}: {{value}}
{% endfor %}

# Discover some devices automatically
# discovery:

system_health:

# Set API Password
http:
  api_password: {{homeassistant_http.api_password}}
  trusted_networks:
{% for network in homeassistant_http.trusted_networks %}
     - {{network}}
{% endfor %}

logger:
  default: info
  logs:
    homeassistant.components.device_tracker: error
    homeassistant.components.device_tracker.nmap_tracker: error
    homeassistant.components.device_tracker.ping: warn
    homeassistant.components.http: warn
    # homeassistant.components.automation: debug

# View all events in a logbook
logbook:

# Enables the frontend
frontend:

# Enables support for tracking state changes over time.
history:

influxdb:
  host: localhost
  port: "{{influxdb_port}}"
  username: "{{influxdb_homeassistant_user}}"
  password: "{{influxdb_homeassistant_password}}"
  database: "{{influxdb_homeassistant_db}}"
  ssl: true
  verify_ssl: false # self-signed cert

notify:
  # Hass only works with legacy slack tokens
  # https://api.slack.com/custom-integrations/legacy-tokens
  # Slack's advantage over pushbullet is the ability to format messages and more customizable notification preferences
  # Note that username needs to be set to a different user than the one logged in to a device (e.g. phone)
  # for notifications to show up (messages from one-self do not generate notifications)
  # If username is not specified below, then messages will come from one-self (and hence no notifications)
  - name: slack
    platform: slack
    api_key: "{{slack_api_key}}"
    default_channel: "{{slack_default_channel}}"
    username: "{{slack_username}}"

# Allows you to issue voice commands from the frontend
conversation:

device_tracker:
  - platform: nmap_tracker
    hosts: {{nmap_tracker_hosts}}
    track_new_devices: no
    consider_home: 1200
    interval_seconds: 5
  - platform: ping
    track_new_devices: yes
    interval_seconds: 5
    consider_home: 7
    hosts:
{% for key, value in device_tracker_ping.iteritems() %}
      {{key}}: {{value}}
{% endfor %}

  # - platform: owntracks_http
  #   interval_seconds: 3
  #   consider_home: 10

# Track the sun
sun:

# Enable iOS support
# ios:

weblink:
  entities:
    - name: Sonos HTTP API
      url: http://{{casa_ip}}:{{sonos_http_api_port}}/
    - name: HADashboard
      url: {{appdaemon_dash_url}}

scene: !include scenes.yaml

media_player:
  - platform: samsungtv
    host: {{samsungtv_host}}
    port: 8001
  # Apparently Hass' spotify component doesn't recognize sonos devices :(
  # https://community.home-assistant.io/t/spotify-does-not-find-sonos-players-in-source/16245
  - platform: spotify
    client_id: {{spotify_client_id}}
    client_secret: {{spotify_client_secret}}

# There's issues with AppleTV that cause the TV to turn on randomly. Disabling it for now.
# - https://community.home-assistant.io/t/apple-tv-apple-tv-failed-to-login/11694/53
# - https://github.com/home-assistant/home-assistant/issues/6777
# apple_tv:
#   - name: Apple TV
#     host: {{atv_host}}
#     login_id: {{atv_login_id}}
#     start_off: false
#    credentials: CREDENTIALS

hue:
  bridges:
    - host: {{phue_ip}}
      filename: phue.conf
      allow_unreachable: true
      allow_hue_groups: true

tradfri:
  host: {{tradfri_ip}}
  # allow_tradfri_groups: true # Doesn't seem to work anymore?, use light groups below

# Creating own groups so we can control all lights at once, working around
# this and other issues:
# https://github.com/home-assistant/home-assistant/issues/9801
light:
  - platform: group
    name: bathroom_group
    entities:
      - light.bathroom_left_back
      - light.bathroom_left_front
      - light.bathroom_right_back
      - light.bathroom_right_front
      - light.bathroom_shower
  - platform: group
    name: Office
    entities:
      - light.office_lamp_1
      - light.office_lamp_2
      - light.office_lamp_3
  - platform: group
    name: Dining Table
    entities:
      - light.eetkamer_lamp_1
      - light.eetkamer_lamp_2
      - light.eetkamer_lamp_3
  - platform: group
    name: Hallway
    entities:
      - light.hal_lamp_1
      - light.hal_lamp_2
      - light.hal_lamp_3

switch:
  - platform: flux
    mode: mired
    lights:
      - light.hal_lamp_1

panel_iframe:
  roofcam:
    title: 'roofcam'
    url: 'http://{{casa_ip}}:{{roofcam_port}}'
    icon: 'mdi:camcorder'

sensor:
    - platform: systemmonitor
      resources:
         - type: memory_free
         - type: disk_use_percent
           arg: /
         - type: memory_use_percent
         - type: load_1m
         - type: load_5m
         - type: load_15m
         - type: processor_use
    - platform: filter
      name: "filtered deskheight"
      entity_id: sensor.deskheight
      filters:
        - filter: lowpass
          time_constant: 10
          precision: 0
    - platform: buienradar
      monitored_conditions:
        - symbol
        - humidity
        - temperature
        - windspeed
        - pressure
    - platform: postnl
      username: "{{postnl_username}}"
      password: "{{postnl_password}}"
    - platform: dsmr
      host: "{{groups["energy_tracker"][0]}}"
      port: "{{ser2net_public_port}}"
      dsmr_version: 4
    - platform: google_travel_time
      api_key: {{google_travel_time_api_key}}
      origin: {{google_travel_time_origin}}
      destination: {{google_travel_time_destination}}
      name: {{google_travel_time_name}}
    - platform: time_date
      display_options:
        - 'time'
    - platform: command_line
      name: "prom2hass"
      command: python /config/prom2hass.py
      scan_interval: 20
      # Let's set the sensor to always be 1, otherwise hass will try to capture the much more verbose output
      # of prom2hass which it doesn't allow since sensor states can only be 255 characters.
      value_template: "1"
    - platform: template
      sensors:
        desk_state:
          friendly_name: "Desk"
          {% raw %}
          value_template: >-
            {% if states('sensor.deskheight')|float  < 75 %}
              down
            {% else %}
              up
            {% endif %}
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'
        br_symbol_highres:
          friendly_name: "br Symbol highres"
          {% raw %}
          value_template: "{{ states('sensor.br_symbol') }}"
          entity_picture_template: "{{ states.sensor.br_symbol.attributes.entity_picture | replace('30x30', '300x300') }}"
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'

        postnl_enroute:
          friendly_name: "postnl enroute"
          {% raw %}
          value_template: >-
            {% set ns = namespace(shipments=0) %}
            {% for shipment in state_attr('sensor.postnl', 'shipments') %}
              {% if not shipment['status']['isDelivered'] %}
               {% set ns.shipments=ns.shipments+1 %}
              {% endif %}
            {% endfor %}
            {{ ns.shipments }}
          {% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'

binary_sensor:
  - platform: workday
    country: NL
    workdays: [mon, tue, wed, thu, fri]
  - platform: template
    sensors:
      joris_is_workday:
        friendly_name: "Joris is workday"
        {% raw %}
        value_template: "{{ is_state('binary_sensor.workday_sensor', 'on') and is_state('input_boolean.joris_pto', 'off') }}"
        {% endraw %}

      # Newline required here so ansible doesn't mess up the indentation after 'endraw'
      joris_working:
        friendly_name: "Joris working"
        {% raw %}
        value_template: "{{ (states('device_tracker.mbpcisco') == 'home') and (is_state('binary_sensor.joris_is_workday', 'on')) }}"
        {% endraw %}

      # Newline required here so ansible doesn't mess up the indentation after 'endraw'
      washing_machine:
        friendly_name: "Washing Machine"
        {% raw %}
        value_template: "{{ states.switch.washing_machine.attributes.current_power_w | float > 100 }}"
        {% endraw %}

      # Newline required here so ansible doesn't mess up the indentation after 'endraw'
      dryer:
        friendly_name: "Dryer"
        {% raw %}
        value_template: "{{ states.switch.dryer.attributes.current_power_w | float > 100 }}"
        {% endraw %}

      # Newline required here so ansible doesn't mess up the indentation after 'endraw'
      housekeeping:
        # Housekeeping on Monday and Fridays
        friendly_name: "Housekeeping"
        entity_id: sensor.time
        value_template: >-
          {% raw %}{{ ((now().isoweekday() == 1) and (now().hour >= 12 and now().hour < 16))
              or ((now().isoweekday() == 5) and (now().hour >= 12 and now().hour < 14)) }}{% endraw %}

        # Newline required here so ansible doesn't mess up the indentation after 'endraw'

nest:
    client_id: {{nest_client_id}}
    client_secret: {{nest_client_secret}}

zwave:
  usb_path: "{{zwave_gateway_device}}"

{#
  1. Use %raw to insert braces into the lines below without ansible replacing them.
  2. FYI that in shell_command can't combine variables with actual shells (so using >> and | won't work)
     This is to ensure we're not just executing arbitrary shell commands based on user input.
     See https://github.com/home-assistant/home-assistant/blob/3ee4d1060fdbe067c19f7d4ce4777a7eb9dbb412/
     homeassistant/components/shell_command.py#L59-L65
#}

shell_command:
    play_sonos_favorite: 'curl "{{sonos_http_api_url_base}}/{% raw %}{{room}}/favorite/{{favorite}}{% endraw %}"'
    play_sonos_preset: 'curl "{{sonos_http_api_url_base}}/preset/{% raw %}{{preset}}{% endraw %}"'
    restart_sonos: '/usr/bin/sudo /bin/systemctl restart {{sonos_http_api_service}}'
    samsungtv_send_key: '/usr/bin/samtvcli --server {{samsungtv_host}} --session-id 1 --session-key {{samsungtv_session_key}} key {% raw %}{{key}}{% endraw %}'

input_select:
  house_mode:
    name: House mode
    options:
     - Home
     - Away
     - Sleeping
    initial: Home
    icon: mdi:home
  music_artist_select:
    name: Artist
    options:
     - Alabama Shakes
     - Bruce Springsteen
     - Bruno Mars
     - Celine Dion
     - Coldplay
     - Kensington
     - Marco Borsato
    icon: mdi:music
  living_preset:
    name: Living Scene
    options:
      - NoPreset
      - Romance
      - Christmas
      - Relaxing
      - Watching TV
      - Breakfast
      - Reading
  downstairs_music:
    name: Downstairs Music
    initial: NoMusic
    icon: mdi:music
    options:
      - Breakfast
      - Party
      - Pop
      - Lounge
      - Romance
      - Christmas
      - Coffee Bar
      - Relaxing
      - Disney
      - Dinner With Friends
      - Reading # Reading doesn't have associated music in sonos (nor does it stop the music)
      - NoMusic
  bathroom_music:
    name: Bathroom Music
    icon: mdi:music
    initial: Bathroom NoMusic
    options:
      - Bathroom Relaxing
      - Bathroom Morning
      - Bathroom NoMusic
  camera_preset:
    name: Camera Preset
    initial: Home
    icon: mdi:camcorder
    options:
      - All On
      - Home

input_boolean:
  cooking:
    name: Cooking
    initial: off
  joris_pto:
    name: Joris PTO
    initial: off
  ilse_pto:
    name: Ilse PTO
    initial: off

script: !include scripts.yaml

######################
##  CONFIG EDITOR   ##
#####################

# Enable config editor
config:

group: !include groups.yaml

#zwave:
#  device_config: !include zwave_device_config.yaml


###################
##  AUTOMATION   ##
##################

# Include the automation editor:
automation: !include automations.yaml

